import LocalLoopback from './local-loopback';
/**
 * Audio format types supported by WavStreamPlayer
 */
export type AudioFormat = 'pcm' | 'g711a' | 'g711u';
/**
 * Plays audio streams received in raw PCM16, G.711a, or G.711u chunks from the browser
 * @class
 */
export declare class WavStreamPlayer {
    scriptSrc: string;
    sampleRate: number;
    context: AudioContext | null;
    streamNode: AudioWorkletNode | null;
    trackSampleOffsets: Record<string, {
        trackId: string;
        offset: number;
        currentTime: number;
    }>;
    interruptedTrackIds: Record<string, boolean>;
    isPaused: boolean;
    /**
     * Whether to enable local loopback
     */
    enableLocalLoopback: boolean;
    localLoopback: LocalLoopback | undefined;
    /**
     * Default audio format
     */
    defaultFormat: AudioFormat;
    localLoopbackStream: MediaStream | undefined;
    private volume;
    /**
     * Creates a new WavStreamPlayer instance
     * @param {{sampleRate?: number, enableLocalLoopback?: boolean, defaultFormat?: AudioFormat, volume?: number}} options
     * @returns {WavStreamPlayer}
     */
    constructor({ sampleRate, enableLocalLoopback, defaultFormat, volume }?: {
        sampleRate?: number;
        enableLocalLoopback?: boolean;
        defaultFormat?: AudioFormat;
        volume?: number;
    });
    /**
     * Connects the audio context and enables output to speakers
     * @returns {Promise<true>}
     */
    private connect;
    /**
     * Pauses audio playback
     */
    pause(): Promise<void>;
    /**
     * Resumes audio playback
     */
    resume(): Promise<void>;
    /**
     * Toggles between play and pause states
     */
    togglePlay(): Promise<void>;
    /**
     * Checks if audio is currently playing
     * @returns {boolean}
     */
    isPlaying(): boolean;
    /**
     * 如果使用了本地回环，需要确保音频上下文已经准备好
     * @returns {Promise<void>}
     */
    checkForReady(): Promise<void>;
    /**
     * Starts audio streaming
     * @private
     * @returns {Promise<true>}
     */
    private _start;
    /**
     * Adds audio data to the currently playing audio stream
     * You can add chunks beyond the current play point and they will be queued for play
     * @param {ArrayBuffer|Int16Array|Uint8Array} arrayBuffer
     * @param {string} [trackId]
     * @param {AudioFormat} [format] - Audio format: 'pcm', 'g711a', or 'g711u'
     */
    add16BitPCM(arrayBuffer: ArrayBuffer | Int16Array | Uint8Array, trackId?: string, format?: AudioFormat): Promise<void>;
    /**
     * Gets the offset (sample count) of the currently playing stream
     * @param {boolean} [interrupt]
     * @returns {{trackId: string|null, offset: number, currentTime: number} | null}
     */
    getTrackSampleOffset(interrupt?: boolean): Promise<{
        trackId: string | null;
        offset: number;
        currentTime: number;
    } | null>;
    /**
     * Strips the current stream and returns the sample offset of the audio
     * @returns {{trackId: string|null, offset: number, currentTime: number} | null}
     */
    interrupt(): Promise<{
        trackId: string | null;
        offset: number;
        currentTime: number;
    } | null>;
    /**
     * Set media stream for local loopback
     */
    setMediaStream(stream?: MediaStream): void;
    /**
     * Adds G.711 A-law encoded audio data to the currently playing audio stream
     * @param {ArrayBuffer|Uint8Array} arrayBuffer - G.711 A-law encoded data
     * @param {string} [trackId]
     * @returns {Int16Array}
     */
    addG711a(arrayBuffer: ArrayBuffer | Uint8Array, trackId?: string): Promise<void>;
    /**
     * Adds G.711 μ-law encoded audio data to the currently playing audio stream
     * @param {ArrayBuffer|Uint8Array} arrayBuffer - G.711 μ-law encoded data
     * @param {string} [trackId]
     */
    addG711u(arrayBuffer: ArrayBuffer | Uint8Array, trackId?: string): Promise<void>;
    setSampleRate(sampleRate: number): void;
    setDefaultFormat(format: AudioFormat): void;
    /**
     * Sets the volume of audio playback
     * @param {number} volume - Volume level (0.0 to 1.0)
     */
    setVolume(volume: number): void;
    /**
     * Gets the current volume level of audio playback
     * @returns {number} Current volume level (0.0 to 1.0)
     */
    getVolume(): number;
    /**
     * Destroys the player instance and releases all resources
     * Should be called when the player is no longer needed
     */
    destroy(): Promise<void>;
}
